* Initializing basic features
** Loading package archives
#+begin_src emacs-lisp :tangle yes
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))

(package-initialize)

#+end_src

** Setting window size
#+begin_src emacs-lisp :tangle yes
(defun get-default-height ()
       (/ (- (display-pixel-height) 120)
          (frame-char-height)))
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Setting up use-package
#+begin_src emacs-lisp :tangle yes
(eval-when-compile
  (require 'use-package))
#+end_src

** Set up backup directory, turn off bell sound, load themes, and set font
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

(setq default-directory "/Users/baltasarsalamonwelwert/")
  
(setq ring-bell-function 'ignore)

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

(setq custom-file "~/.emacs.d/emacs-custom.el")

(load custom-file)
#+end_src

** Set theme and font
#+begin_src emacs-lisp :tangle yes
  (use-package spacemacs-theme
  :ensure t
  :defer t)

  (use-package modus-operandi-theme
  :ensure t
  :defer t)


  (set-frame-font "Cascadia Code 12")
  (load-theme 'spacemacs-light t)

  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "ETBembo" :height 140))))
   '(fixed-pitch ((t ( :family "Cascadia Code 12" :height 140)))))

#+end_src

** Hide various graphical elements
#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(turn-on-page-break-lines-mode)
#+end_src

** Dashboard
#+begin_src emacs-lisp :tangle yes
(use-package dashboard
  :ensure t
  :config
  (setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
;;                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner 3)
  (dashboard-setup-startup-hook))

#+end_src

* Writing and editing
** Abbrev
#+begin_src emacs-lisp :tangle yes
(setq-default abbrev-mode t)
#+end_src

** Olivetti
#+begin_src emacs-lisp :tangle yes
(use-package olivetti
  :ensure t)
#+end_src

** Flyspell
#+begin_src emacs-lisp :tangle yes
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

(use-package flyspell-correct-ivy
  :after flyspell-correct)
#+end_src

* Ivy and related packages
** Ivy
 #+begin_src emacs-lisp :tangle yes
 (use-package ivy
   :defer 0.1
   :diminish
   :bind (("C-c C-r" . ivy-resume)
          ("C-x B" . ivy-switch-buffer-other-window))
   :custom
   (ivy-count-format "(%d/%d) ")
   (ivy-use-virtual-buffers t)
   :config (ivy-mode))
 #+end_src

** Counsel
#+begin_src emacs-lisp :tangle yes
(use-package counsel
   :after ivy
   :config (counsel-mode))
#+end_src

** Swiper
#+begin_src emacs-lisp :tangle yes
(use-package swiper
   :after ivy
   :bind (("C-s" . swiper)
          ("C-r" . swiper)))
#+end_src

** Deft
#+begin_src emacs-lisp :tangle yes
(use-package deft
  :commands deft
  :init
  (setq deft-default-extension "org"
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
        deft-auto-save-interval -1.0
        deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  :config
  (add-to-list 'deft-extensions "tex")
  )
#+end_src


** Ivy-bibtex
 #+begin_src emacs-lisp :tangle yes
  (use-package ivy-bibtex
    :ensure t
    :bind*
    ("C-c C-r" . ivy-bibtex))

    (setq
     bibtex-completion-notes-path "/Users/baltasarsalamonwelwert/Dropbox/ORG/Sources/Notes/"
     bibtex-completion-bibliography "/Users/baltasarsalamonwelwert/Dropbox/ORG/Sources/lib.bib"
     bibtex-completion-pdf-field "file"
     bibtex-completion-notes-template-multiple-files
     (concat
      "#+TITLE: ${title}\n"
      "#+ROAM_KEY: cite:${=key=}\n"
      "* TODO Notes\n"
      ":PROPERTIES:\n"
      ":Custom_ID: ${=key=}\n"
      ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
      ":AUTHOR: ${author-abbrev}\n"
      ":JOURNAL: ${journaltitle}\n"
      ":DATE: ${date}\n"
      ":YEAR: ${year}\n"
      ":DOI: ${doi}\n"
      ":URL: ${url}\n"
      ":END:\n\n"
      )
 )
 #+end_src

* Org-ref
#+begin_src emacs-lisp :tangle yes
(use-package org-ref
    :ensure t
    :config
    (setq
         org-ref-completion-library 'org-ref-ivy-cite
         org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-ivy-bibtex
         org-ref-default-bibliography (list "/Users/baltasarsalamonwelwert/Dropbox/ORG/Sources/lib.bib")
         org-ref-bibliography-notes "/Users/baltasarsalamonwelwert/Dropbox/ORG/Sources/Notes/bibnotes.org"
         org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
         org-ref-notes-directory "/Users/baltasarsalamonwelwert/Dropbox/ORG/Sources/Notes/"
         org-ref-notes-function 'orb-edit-notes
	 ))
#+end_src

* Default directories
#+begin_src emacs-lisp :tangle yes
(setq
   org_notes "/Users/baltasarsalamonwelwert/Dropbox/ORG/Sources/ORG-Simuvac/"
   zot_bib "/Users/baltasarsalamonwelwert/Dropbox/ORG/Sources/Notes/bibnotes.org"
   org-directory org_notes
   deft-directory org_notes
   org-roam-directory org_notes
   )
#+end_src

* ORG

** ORG
 #+begin_src emacs-lisp :tangle yes
 (require 'org)
 (setq org-hide-emphasis-markers t)
 (setq org-hide-leading-stars 't)
 (setq org-log-into-drawer 't)
 (setq org-agenda-files (list "/Users/baltasarsalamonwelwert/Dropbox/ORG/Planner"
			      "/Users/baltasarsalamonwelwert/Dropbox/ORG/Classes"))

 (setq org-capture-bookmark nil)
 ;;(global-set-key "\C-cl" 'org-store-link)
 (global-set-key "\C-ca" 'org-agenda)
 (global-set-key "\C-cc" 'org-capture)
 ;;(global-set-key "\C-cb" 'org-iswitchb)

 (add-hook 'org-mode-hook 'visual-line-mode)
 (add-hook 'org-mode-hook 'flyspell-mode)

 (setq org-cycle-separator-lines 1)

 #+end_src

** ORG roam
 #+begin_src emacs-lisp :tangle no
 (use-package org-roam
   :ensure t
   :hook (org-load . org-roam-mode)
   :commands (org-roam-buffer-toggle-display
              org-roam-find-file
              org-roam-graph
              org-roam-insert
              org-roam-switch-to-buffer
              org-roam-dailies-date
              org-roam-dailies-today
              org-roam-dailies-tomorrow
              org-roam-dailies-yesterday)
   :config
   (setq 
         org-roam-verbose nil 
         org-roam-buffer-no-delete-other-windows t 
         org-roam-completion-system 'default
	 )
  
   ;; (add-hook 'find-file-hook
   ;;   (defun +org-roam-open-buffer-maybe-h ()
   ;;     (and +org-roam-open-buffer-on-find-file
   ;;          (memq 'org-roam-buffer--update-maybe post-command-hook)
   ;;          (not (window-parameter nil 'window-side)) ; don't proc for popups
   ;;          (not (eq 'visible (org-roam-buffer--visibility)))
   ;;          (with-current-buffer (window-buffer)
   ;;            (org-roam-buffer--get-create)))))
  
   (add-hook 'org-roam-buffer-prepare-hook #'hide-mode-line-mode)
  
    :custom
    (org-roam-directory "/Users/baltasarsalamonwelwert/Dropbox/ORG/Org-Simuvac")

    :bind (:map org-roam-mode-map
		(("C-c n l" . org-roam)
		("C-c n f" . org-roam-find-file)
		("C-c n b" . org-roam-switch-to-buffer)
		("C-c n g" . org-roam-graph))
               :map org-mode-map
               (("C-c n i" . org-roam-insert))))

 #+end_src

** ORG roam bibtex
 #+begin_src emacs-lisp :Tangle no
 (use-package org-roam-bibtex
   :after (org-roam)
   :hook (org-roam-mode . org-roam-bibtex-mode)
   :config
   (setq org-roam-bibtex-preformat-keywords
    '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
   (setq orb-templates
         '(("r" "ref" plain (function org-roam-capture--get-point)
            ""
            :file-name "${slug}"
            :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

 - tags ::
 - keywords :: ${keywords}

 \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

            :unnarrowed t))))
 #+end_src
 
** ORG noter
 #+begin_src emacs-lisp :tangle yes
 (use-package org-noter
   :ensure t
   :after (:any org pdf-view)
   :config
   (setq
    ;; The WM can handle splits
    org-noter-notes-window-location 'other-frame
    ;; Please stop opening frames
    org-noter-always-create-frame nil
    ;; I want to see the whole file
    org-noter-hide-other nil
    ;; Everything is relative to the main notes file
    org-noter-notes-search-path (list org_notes)
    )
   )
 #+end_src

** Company org roam
 #+begin_src emacs-lisp :tangle no
 (use-package company-org-roam
   :ensure t
   :after org-roam
   :config
   ;;(set-company-backend! 'org-mode '(company-org-roam))
   )
 #+end_src

* PDF tools
To install pdf-tools on OS X, you have to run 
#+begin_src bash :tangle no
brew install poppler automake
brew tap dunn/emacs
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package pdf-tools
  :ensure t
  :pin manual
  :config
   (pdf-tools-install)
   (setq-default pdf-view-display-size 'fit-page)
  )
   (setq pdf-view-use-scaling t)
   (setq pdf-view-use-imagick nil)
#+end_src
Then call M-x pdf-tools-install. This produces an error, which you copy and paste into the terminal.

* Company
#+begin_src emacs-lisp :tangle yes
(use-package company
:ensure t
:defer t
)

#+end_src

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
